var exec = require('child_process').exec;
var temp = require('temp');
var fs = require('fs');

//======================================================================================================================
// CONSTANTS
//======================================================================================================================

const DATASTORE_EXEC_LOCATION = "./datastore/datastore";
const DATASTORE_DB_LOCATION = "./datastore/db/dev.kvs";
const DEFAULT_USER_ID = 1;

//======================================================================================================================
// PRIVATE
//======================================================================================================================

var buildDatastoreCommand = function(command, parameters) {
   var launchCommand = DATASTORE_EXEC_LOCATION + "/" + command + " " + DATASTORE_DB_LOCATION;
   for (var i = 0; i < parameters.length; i++) {
      var param = parameters[i];
      launchCommand += ' ';
      var part = param.toString();
      if (part.indexOf(' ') < 0) {
         launchCommand += part;
      }
      else {
         launchCommand += "\"" + part + "\"";
      }
   }

   return launchCommand;
};

var executeDatastoreCommand = function(commandName, parameters, callback) {
   var command = buildDatastoreCommand(commandName, parameters);
   console.log("DataStore: executing command: " + command);
   exec(command,
        function(error, stdout, stderr) {
           callback(error, stdout, stderr);
        });
}

var createChannel = function(deviceName, name, specs) {

   // create the default style
   var style = { "styles" : [ ] };
   if (name == "Sleep_Graph") {
      style.styles.push({
                           "type" : "zeo",
                           "show" : true
                        });
   }
   else {
      style.styles.push({
                           "type" : "line",
                           "lineWidth" : 1,
                           "show" : true
                        });
   }

   // create the channel
   var channel = {
      "deviceName" : deviceName,
      "name" : name,
      "min" : specs.channel_bounds.min_value,
      "max" : specs.channel_bounds.max_value,
      "min_time" : specs.channel_bounds.min_time,
      "max_time" : specs.channel_bounds.max_time,
      "time_type" : "gmt",
      style : style,
      builtin_default_style : style
   };

   // set the channel type, if defined
   if (typeof specs.channelType !== 'undefined' && specs.channelType != null) {
      channel['type'] = specs.channelType;
   }

   if (typeof specs.objectTypeName !== 'undefined' && specs.objectTypeName != null) {
      channel['objectTypeName'] = specs.objectTypeName;
   }

   // time_type defaults to gmt.  It can be overridden to "local" for channels that only know local time
   if (typeof specs.time_type !== 'undefined' && specs.time_type != null) {
      channel['time_type'] = specs.time_type;
   }

   return channel;
};
//======================================================================================================================
// PUBLIC
//======================================================================================================================

var listSources = function(uid, callback) {
   var parameters = ["-r", uid];

   executeDatastoreCommand("info", parameters,
                           function(error, stdout, stderr) {
                              // TODO: add error handling

                              var infoResponse = JSON.parse(stdout);
                              var sourcesMap = {};

                              for (var fullName in infoResponse.channel_specs) {
                                 var specs = infoResponse.channel_specs[fullName];
                                 var split = fullName.split(".");
                                 // device.objectTypeName._comment should not generate an entry
                                 if (split.length > 2) {
                                    continue;
                                 }
                                 var deviceName = split[0];
                                 var objectTypeName = split[1];

                                 // make sure this device exists in the sourcesMap
                                 if (typeof sourcesMap[deviceName] === 'undefined') {
                                    sourcesMap[deviceName] = { "name" : deviceName, "channels" : []};
                                 }

                                 sourcesMap[deviceName].channels.push(createChannel(deviceName, objectTypeName, specs));
                              }

                              // convert the sourcesMap to an array
                              var sources = [];
                              for (var sourceName in sourcesMap) {
                                 sources.push(sourcesMap[sourceName]);
                              }

                              callback(sources);
                           });
};

var getTile = function(uid, deviceNickname, channelName, level, offset, callback) {
   var parameters = [uid,
                     deviceNickname + "." + channelName,
                     level,
                     offset];

   executeDatastoreCommand("gettile", parameters,
                           function(error, stdout, stderr) {
                              // TODO: add error handling
                              var tileResponse = JSON.parse(stdout);
                              if (typeof tileResponse['data'] === 'undefined') {
                                 // respond with an empty tile
                                 tileResponse = {"data":[],"fields":["time","mean","stddev","count"],"level":level,"offset":offset,"sample_width":0};
                              }
                              callback(tileResponse);
                           });
};

var importJson = function(uid, deviceNickname, data, callback) {
   // TODO: add error handling

   temp.open('node_bodytrack_datastore_uploaded_json_data',
             function(err, info) {
                fs.write(info.fd, JSON.stringify(data));
                fs.close(info.fd,
                         function(err) {
                            var parameters = [uid,
                                              deviceNickname,
                                              "--format",
                                              "json",
                                              info.path];

                            executeDatastoreCommand("import", parameters,
                                                    function(err, stdout, stderr) {

                                                       var datastoreResponse = JSON.parse(stdout);

                                                       var response = {
                                                          "payload" : {
                                                             "successful_records" : datastoreResponse.successful_records,
                                                             "failed_records" : datastoreResponse.failed_records
                                                          }
                                                       };

                                                       if (datastoreResponse &&
                                                           datastoreResponse.failed_records == 0 &&
                                                           datastoreResponse.successful_records > 0) {
                                                          response["result"] = "OK";
                                                          response["message"] = "Upload successful!";
                                                       }
                                                       else {
                                                          response["result"] = "KO";
                                                          response["message"] = "Upload failed!";
                                                       }

                                                       callback(response);
                                                    });
                         });
             });
};

//======================================================================================================================
// EXPORTS
//======================================================================================================================

exports.DEFAULT_USER_ID = DEFAULT_USER_ID;
exports.listSources = listSources;
exports.getTile = getTile;
exports.importJson = importJson;
